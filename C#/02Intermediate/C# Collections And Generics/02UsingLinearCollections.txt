Encapsulating Collections 
    Demo 1:
        IEnumerable<T>
            >>Collects Data into    List<T> 
                >>Mutates Data 
                    >>Freezes Data 
                        >>Build Queries can produce Views ~ Stable unchangeable results, safe for reuse. 

   Demo 2: 
        IEnumerable<T> 
            >>Collects Data into   List<T>
                >>Perform multiple Operations to stir up List's content, without destorying previous operations data. 

Encapsulating A List ~ The power of linear collections 

    The generic GridFormatter accepts an IEnumerable<T>, then saves it internally as an IList<T>
    See snip x2 

        Constructors should construct a valid object, not do its work. 
        Create methods to do the work! 
        Constructor could be called 100s of times, but methods shouldn't be called on creation. 

    The Augmented Constructor Principle 
        Avoid work in a constructor that significantly exceeds the dimenstions of its arguments. 

Justifying Decisions 
    Why a List, rather than anything else? 

    IEnumerable comes into the GridFormatter at an unknown length, 
        IList can grow incremenetally without knowing its size
        IList supports column- and row-wise traveral in a simulated matrix 
        IList's Index takes O(1) time ~ Very fast! 
        IList's Count property trakes O(1) time ~ Very fast!

        List<T>                                     T[]
        Exposes Indexer with range checks           Exposes Indexer with range checks 
                                                    Efficient iteration in some edge cases 
        Collected using ToList()                    Collected using ToArray()
        ToList() collects straight into the list    ToArray() uses intermediate storage 
        Complete collecting in one go               Requires one more copy operation
        (Sits on Array)
        Half of underlying array not used           All array locations are used 
        Not trimmed list wastes memory              Array uses memory optimally 

    Linear >>> Complex collections (As long as the linear collection does the job)

Imposing views upon a Collections
    Additional AC: Calculate optimal number of columns.

    After data has been stored in the Class, 
        subsequent methods can be treated as queries ran on the encasulated

    After data has entered the class, 
        There is no reason to keep the input objects
        When data is stored for reuse, try to store the data in the most useful format.  

        public IEnumerable<string> Format(int width, int gap) => 
            Enumerable.Empty<string>();                                     << Nothing but a specfic view of the list that returns printable rows 

Completing the design 

    Jesus crist this was an intense module ~ 
    The 30 lines of code calling twice, have been replaced with 150 lines of code to format the data correctly, then call once. 
    See Snips x2

    Power of Lists ~ 
        Guarantees O(1) time    to append an item 
                                to retreive total count of items 
                                to access an item at random possition

    A list has been used to construct an algorith, both time and space linear! 
        And the main method doesn't know how we have used said list to solve the problem! 
            and it doesnt even know the list exists! 
            +Data encapsualation at its finest! 

Inventing Shuffling algorithm 
    Randomized algorithm ~ To answer "what if" 

    AC: 
        Given a sequence, reproduce it in shuffled order 
        -Every permutation is equally probable and dependant
        -Repeared reading will yield a different order of subjects 

            IEnumerable<Workers> workers; 

            var a = shuffle(workers);
            var b = shuffle(workers);

    Theory: 
        Given equally probable, independant permutations, each of the N items has uniform probability distribution of possible patterns. 

    
    Implementing Fisher-Yates Shuffle:
        We need to shuffle an input sequence        but, Sequence cannot tell number of elements
        Can we use a list/array?                    No Efficient item removal 
        Can we use a dictionary?                    What would be the key? 

Implementing Data Randomization 

    Significantly Easier than before! 
    